{"version":3,"sources":["getScore.js","App.js","initializeReactGA.js","serviceWorker.js","index.js"],"names":["getScore","marks","score","i","length","j","checked","reducer","state","action","type","copy","JSON","parse","stringify","cells","cell","indexRow","indexCell","ReactGA","event","category","label","value","initialState","labels","map","row","App","useReducer","dispatch","className","key","classnames","id","name","onChange","htmlFor","version","initializeReactGA","process","NODE_ENV","REACT_APP_TRACKING_CODE","initialize","pageview","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"usCAoDeA,MAZf,SAAkBC,GAEhB,IADA,IAAIC,EAAQ,EACHC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,GAAK,EACrC,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAME,GAAGC,OAAQC,GAAK,EACpCJ,EAAME,GAAGE,GAAGC,UACdJ,GAAS,GAIf,OAAOA,G,OChCT,SAASK,EAAQC,EAAOC,GACtB,GAVa,WAUTA,EAAOC,KAAiB,CAC1B,IAAMC,EAAOC,KAAKC,MAAMD,KAAKE,UAAUN,EAAMO,QACvCC,EAAOL,EAAKF,EAAOQ,UAAUR,EAAOS,WAW1C,OAVAF,EAAKV,SAAWU,EAAKV,QAGrBa,IAAQC,MAAM,CACZX,OAAQA,EAAOC,KACfW,SAAU,QACVC,MAAOb,EAAOa,MACdC,MAAOP,EAAKV,QAAU,EAAI,IAGrB,eACFE,EADL,CAEEO,MAAOJ,EACPT,MAAOF,EAASW,KAGpB,OAAOH,EAGT,IAAMgB,EA7BG,CACLT,MAAOU,EAAOC,KAAI,SAACC,GAAD,OAASA,EAAID,KAAI,SAACJ,GAAD,MAAY,CAAEhB,SAAS,EAAOgB,eACjEpB,MAAO,GA2EI0B,MA9Cf,WAAgB,IAAD,EACwBC,qBAAWtB,EAASiB,GAD5C,0BACJT,EADI,EACJA,MAAOb,EADH,EACGA,MAAS4B,EADZ,KAGb,OACE,6BAASC,UAAU,OACjB,qDACA,4BAAK7B,GACJA,GAAS,GAAK,sCACf,+BACE,+BACGa,EAAMW,KAAI,SAACC,EAAKV,GAAN,OACT,wBAAIe,IAAKf,GACNU,EAAID,KAAI,WAAqBR,GAArB,IAAGZ,EAAH,EAAGA,QAASgB,EAAZ,EAAYA,MAAZ,OACP,wBACES,UAAWE,IAAW,YAAa,CACjC,gBAAiB3B,IAEnB0B,IAAKd,GAEL,2BACEZ,QAASA,EACTyB,UAAU,gBACVG,GAAE,UAAKjB,EAAL,YAAiBC,GACnBiB,KAAI,UAAKlB,EAAL,YAAiBC,GACrBkB,SAAU,kBACRN,EAAS,CACPZ,YACAD,WACAK,QACAZ,KA/DT,YAkEKA,KAAK,aAEP,2BAAO2B,QAAO,UAAKpB,EAAL,YAAiBC,IAAcI,aAOzD,4BAAQS,UAAU,eAAlB,IAAkCO,OCxEzBC,MARf,WAA8B,IAAD,EACmBC,kLAAtCC,EADmB,EACnBA,SAAUC,EADS,EACTA,wBACD,eAAbD,IACFtB,IAAQwB,WAAWD,GACnBvB,IAAQyB,SAAS,OCKDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,QACxBf,KDuHI,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c51ce1d.chunk.js","sourcesContent":["/*\nconst data = [\n  [\n    { checked: false },\n    { checked: false },\n    { checked: true },\n    { checked: false },\n    { checked: false },\n  ],\n  [\n    { checked: false },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n  ],\n  [\n    { checked: true },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n  ],\n  [\n    { checked: false },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n    { checked: true },\n  ],\n  [\n    { checked: false },\n    { checked: true },\n    { checked: false },\n    { checked: false },\n    { checked: false },\n  ],\n];\n*/\n\nfunction getScore(marks) {\n  let score = 0;\n  for (let i = 0; i < marks.length; i += 1) {\n    for (let j = 0; j < marks[i].length; j += 1) {\n      if (marks[i][j].checked) {\n        score += 1;\n      }\n    }\n  }\n  return score;\n}\n\nexport default getScore;\n","import classnames from 'classnames';\nimport React, { useReducer } from 'react';\nimport ReactGA from 'react-ga';\nimport { version } from '../package.json';\nimport './App.css';\nimport getScore from './getScore';\nimport labels from './labels.json';\n\nconst TOGGLE = 'TOGGLE';\n\nfunction makeInitialState() {\n  return {\n    cells: labels.map((row) => row.map((label) => ({ checked: false, label }))),\n    score: 0\n  };\n}\n\nfunction reducer(state, action) {\n  if (action.type === TOGGLE) {\n    const copy = JSON.parse(JSON.stringify(state.cells));\n    const cell = copy[action.indexRow][action.indexCell];\n    cell.checked = !cell.checked;\n\n    // TODO: decorate the reducer\n    ReactGA.event({\n      action: action.type,\n      category: 'Bingo',\n      label: action.label,\n      value: cell.checked ? 1 : 0\n    });\n\n    return {\n      ...state,\n      cells: copy,\n      score: getScore(copy)\n    };\n  }\n  return state;\n}\n\nconst initialState = makeInitialState();\n\nfunction App() {\n  const [{ cells, score }, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <article className=\"App\">\n      <h1>Conference Call Bingo</h1>\n      <h2>{score}</h2>\n      {score >= 5 && <h3>Bingo!</h3>}\n      <table>\n        <tbody>\n          {cells.map((row, indexRow) => (\n            <tr key={indexRow}>\n              {row.map(({ checked, label }, indexCell) => (\n                <td\n                  className={classnames('App__cell', {\n                    'App__cell--on': checked\n                  })}\n                  key={indexCell}\n                >\n                  <input\n                    checked={checked}\n                    className=\"App__checkbox\"\n                    id={`${indexRow}-${indexCell}`}\n                    name={`${indexRow}-${indexCell}`}\n                    onChange={() =>\n                      dispatch({\n                        indexCell,\n                        indexRow,\n                        label,\n                        type: TOGGLE\n                      })\n                    }\n                    type=\"checkbox\"\n                  />\n                  <label htmlFor={`${indexRow}-${indexCell}`}>{label}</label>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <footer className=\"App__footer\">v{version}</footer>\n    </article>\n  );\n}\n\nexport default App;\n","import ReactGA from 'react-ga';\n\n// CREDIT: https://medium.com/google-cloud/tracking-site-visits-on-react-app-hosted-in-google-cloud-using-google-analytics-f49c2411d398\nfunction initializeReactGA() {\n  const { NODE_ENV, REACT_APP_TRACKING_CODE } = process.env;\n  if (NODE_ENV === 'production') {\n    ReactGA.initialize(REACT_APP_TRACKING_CODE);\n    ReactGA.pageview('/');\n  }\n}\n\nexport default initializeReactGA;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport initializeReactGA from './initializeReactGA';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n  initializeReactGA()\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}